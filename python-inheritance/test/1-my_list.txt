doctest for 1-my_list
"""
This module defines a class MyList which inherits from the built-in list class
and provides an additional method to print the list sorted.

Usage and doctest examples:

>>> my_list = MyList([3, 1, 4, 1, 5, 9])
>>> my_list.print_sorted()
[1, 1, 3, 4, 5, 9]

# Testing with negative numbers
>>> my_list = MyList([-5, -1, -3, 2, 0])
>>> my_list.print_sorted()
[-5, -3, -1, 0, 2]

# Testing with repeated numbers
>>> my_list = MyList([2, 3, 2, 3, 1, 1])
>>> my_list.print_sorted()
[1, 1, 2, 2, 3, 3]

# Testing with empty list
>>> my_list = MyList([])
>>> my_list.print_sorted()
[]

# Testing with strings (alphabetical sorting)
>>> my_list = MyList(["apple", "banana", "cherry", "apple"])
>>> my_list.print_sorted()
['apple', 'apple', 'banana', 'cherry']

# Testing with mixed data types (raises TypeError)
>>> my_list = MyList([1, "apple", 2])
>>> my_list.print_sorted()
Traceback (most recent call last):
    ...
TypeError: '<' not supported between instances of 'str' and 'int'

# Testing that the list itself is not modified
>>> my_list = MyList([10, 5, 8])
>>> my_list.print_sorted()
[5, 8, 10]
>>> my_list
[10, 5, 8]

# Testing that we can still append and pop elements (inherited methods)
>>> my_list.append(20)
>>> my_list
[10, 5, 8, 20]
>>> my_list.pop()
20
>>> my_list